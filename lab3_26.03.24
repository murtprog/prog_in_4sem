#1
Keyboard = ["qwertyuiop", "йцукенгшщзхъ", "asdfghjkl", "фывапролджэ", "zxcvbnm", "ячсмитьбю"]


def check(password):
    if len(password) < 8:
        return("error")

    if not (any(i.isupper() for i in password) and any(i.islower() for i in password)):
            return("error")

    if not any(i.isdigit() for i in password):
            return("error")

    for i in Keyboard:
            for j in range(len(password) - 2):
                if password[j:j+3].lower() in i:
                    return("error")

    return("ok")


print(check("fqG34"))
print(check("dfwegsew34fsg"))
print(check("flsiMMsgkwl"))
print(check("qwertyUU45"))
print(check("ajfB638J"))


#2
Keyboard = ["qwertyuiop", "йцукенгшщзхъ", "asdfghjkl", "фывапролджэ", "zxcvbnm", "ячсмитьбю"]
class PasswordError(Exception):
    pass

class LengthError(PasswordError):
    pass

class LetterError(PasswordError):
    pass

class DigitError(PasswordError):
    pass

class SequenceError(PasswordError):
    pass

def check_password(password):
    if len(password) < 9:
         raise LengthError("Пароль должен содержать хотябы 9 символов")
        
    if not (any(i.isupper() for i in password) and any(i.islower() for i in password)):
         raise LetterError("Пароль должен содержать как большие так и маленькие буквы")
        
    if not any(i.isdigit() for i in password):
         raise DigitError("В пароле должны содержаться цифры")
        
    for i in Keyboard:
            for j in range(len(password) - 2):
                if password[j:j+3].lower() in i:
                    raise SequenceError("Пароль не должен быть простым")
        
        return "ok"


try:
    print(password("qwerHG3957"))
except PasswordError as e:  
    print(f"Произошла ожидаемая ошибка: {e}.")
    
try:
    print(password("qjfYT9375"))
except PasswordError as e:  
    print(f"Произошла ожидаемая ошибка: {e}.")


#3
Keyboard = ["qwertyuiop", "йцукенгшщзхъ", "asdfghjkl", "фывапролджэ", "zxcvbnm", "ячсмитьбю"]

class PasswordError(Exception):
    pass

class LengthError(PasswordError):
    pass

class LetterError(PasswordError):
    pass

class DigitError(PasswordError):
    pass

class SequenceError(PasswordError):
    pass

def check_password(password):
    try:
        assert len(password) >= 9, "Пароль должен содержать хотя бы 9 символов"
        assert any(i.isupper() for i in password) and any(i.islower() for i in password), "Пароль должен содержать как большие, так и маленькие буквы"
        assert any(i.isdigit() for i in password), "В пароле должны содержаться цифры"
        for j in Keyboard:
            for i in range(len(password) - 2):
                assert password[i:i+3].lower() not in j, "Пароль не должен быть простым"
            return "ok"
    except AssertionError as e:
        raise PasswordError(e)
    except Exception as e:
        print(f"Произошла совсем не ожидаемая ошибка: {e}.")
        return "error"



try:
    print(check_password("qwerHG3957"))
except PasswordError as e:  
    print(f"Произошла ожидаемая ошибка: {e}.")
    
try:
    print(check_password("qjfYT9375"))
except PasswordError as e:  
    print(f"Произошла ожидаемая ошибка: {e}.")



#4
Keyboard = ["qwertyuiop", "йцукенгшщзхъ", "asdfghjkl", "фывапролджэ", "zxcvbnm", "ячсмитьбю"]

class PasswordError(Exception):
    pass

class LengthError(PasswordError):
    pass

class LetterError(PasswordError):
    pass

class DigitError(PasswordError):
    pass

class SequenceError(PasswordError):
    pass


def check_password(password):
    try:
        assert len(password) >= 9, "Пароль должен содержать хотя бы 9 символов"
        assert any(i.isupper() for i in password) and any(i.islower() for i in password), "Пароль должен содержать как большие, так и маленькие буквы"
        assert any(i.isdigit() for i in password), "В пароле должны содержаться цифры"
        for j in Keyboard:
            for i in range(len(password) - 2):
                assert password[i:i+3].lower() not in j, "Пароль не должен быть простым"
        return "ok"
    except AssertionError as e:
        raise PasswordError(e)
    except Exception as e:
            print(f"Произошла совсем не ожидаемая ошибка: {e}.")
            return "error"


while True:
    try:
        password = input("Введите новый пароль: ")
        result = check_password(password)
        if result == "ok":
            print("ok")
            break
    except PasswordError as e:
        print(f"Ошибка: {e}")
    except KeyboardInterrupt:
        print("Bye-Bye")
        break



5#
class DefaultList(list):
    def __init__(self, default_value=None):
        super().__init__()
        self.default_value = default_value

    def __getitem__(self, index):
        try:
            return super().__getitem__(index)
        except IndexError:
            return self.default_value

# Создаем список с значением по умолчанию 0
my_list = DefaultList(0)

# Добавляем элементы в список
my_list.append(1)
my_list.append(2)
my_list.append(3)

# Получаем элементы списка
print(my_list[0])  # Вывод: 1
print(my_list[1])  # Вывод: 2
print(my_list[2])  # Вывод: 3
print(my_list[3])  # Вывод: 0 (значение по умолчанию)
print(my_list[4])  # Вывод: 0 (значение по умолчанию)

# Создаем список с другим значением по умолчанию
my_other_list = DefaultList("default")

# Добавляем элементы в список
my_other_list.append("one")
my_other_list.append("two")
my_other_list.append("three")

# Получаем элементы списка
print(my_other_list[0])  # Вывод: "one"
print(my_other_list[1])  # Вывод: "two"
print(my_other_list[2])  # Вывод: "three"
print(my_other_list[3])  # Вывод: "default" (значение по умолчанию)
print(my_other_list[4])  # Вывод: "default" (значение по умолчанию)
