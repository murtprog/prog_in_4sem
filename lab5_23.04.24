#1,2
def is_palindrome(data):
    data = data.lower().replace(' ', '')
    if data == data[::-1]:
        return True
    else:
        return False
        
string = input('Введите строку: ')
if is_palindrome(string):
    print('YES')
else:
    print('NO')


    
#3
number1 = 76784553490"
number2 = "+7 339 353 45-67"
number3 = "8 925 4567890"
number4 = "+7923-456-7890"
number5 = "+7(900)1234567"
number6 = "800-545-3455"

def test_is_correct_mobile_phone_number_ru():
    test_cases = [number1, number2, number3, number4, number5, number6]
    expected_results = [True, True, True, True, False, False]
    
    for i in range(len(test_cases)):
        result = is_correct_mobile_phone_number_ru(test_cases[i])
        if result == expected_results[i]:
            continue
        else:
            print("NO")
            return
    print("YES")

test_is_correct_mobile_phone_number_ru()


#4
def is_correct_mobile_phone_ru(phone):
    if not phone.startswith('8') and not phone.startswith('+7'):
        return False
    if len(phone) != 11:
        return False
    if not phone[1:].isdigit():
        return False
    return True

phone_number = input("Enter mobile phone number: ")
if is_correct_mobile_phone_ru(phone_number):
    print("YES")
else:
    print("NO")


#5
def strip_punctuation_ru(data):
    punctuation = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
    for i in punctuation:
        data = data.replace(i, '')
    return ' '.join(data.split())

def test_strip_punctuation_ru():
    test_cases = [
        ("Привет, Саша!", "Привет Саша"),
        ("С новым годом!", "С новым годом")
        ("Как дела?", "Как дела"),
    ]
    
    for data, expected in test_cases:
        result = strip_punctuation_ru(data)
        if result == expected:
            continue
        else:
            print("NO")
            return
    print("YES")

test_strip_punctuation_ru()


#6
def strip_punctuation_ru(data):
    import re
    return ' '.join(re.findall(r'\b\w+\b', data))

data = "Здраствуйте. Спасибо!"
print(strip_punctuation_ru(data))  



#7
import unittest
from reverse import reverse

class TestReverseFunction(unittest.TestCase):
    def test_empty_string(self):
        self.assertEqual(reverse(''), '')

    def test_one_char_string(self):
        self.assertEqual(reverse('a'), 'a')

    def test_palindrome_string(self):
        self.assertEqual(reverse('racecar'), 'racecar')

    def test_non_palindrome_string(self):
        self.assertEqual(reverse('hello'), 'olleh')

    def test_non_string_non_iterable(self):
        with self.assertRaises(TypeError):
            reverse(123)

    def test_non_string_iterable(self):
        with self.assertRaises(TypeError):
            reverse([1, 2, 3])


if __name__ == '__main__':
    unittest.main()


#8

import pytest
from reverse import reverse

def test_reverse_empty_string():
    assert reverse("") == ""

def test_reverse_single_character_string():
    assert reverse("a") == "a"

def test_reverse_long_string():
    assert reverse("qwer") == "rewq"

def test_reverse_lowercase_and_uppercase_characters():
    assert reverse("Ty uI") == "Iu yT"

def test_reverse_special_characters():
    assert reverse(!@#$%^&*) == "*&^%$#@!"

def test_reverse_numbers():
    assert reverse("5678") == "8765"

    
#9
import pytest
from my_module import count_chars

def test_count_chars_correct_input():
    assert count_chars("word") == {'w': 1, 'o': 1, 'r': 2, 'd': 1}

def test_count_chars_empty_string():
    assert count_chars("") == {}

def test_count_chars_non_string_input():
    with pytest.raises(TypeError):
        count_chars(123)

def test_count_chars_symbols_and_numbers():
    assert count_chars("a1b2c3") == {'a': 1, '1': 1, 'b': 1, '2': 1, 'c': 1, '3': 1}

    
#10
ef count_chars(s):
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    return char_count

a = "word"
print(count_chars(s))  # Вывод: {'w': 1, 'o': 1, 'r': 2, 'd': 1}
