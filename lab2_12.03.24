#1
class Rectangle:
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
    
    def intersection(self, notself):
        x_overlap = max(0, min(self.x + self.w, notself.x + notself.w) - max(self.x, notself.x))
        y_overlap = max(0, min(self.y + self.h, notself.y + notself.h) - max(self.y, notself.y))
        
        if x_overlap == 0 or y_overlap == 0:
            return None
        else:
            x_intersect = max(self.x, notself.x)
            y_intersect = max(self.y, notself.y)
            w_intersect = x_overlap
            h_intersect = y_overlap
            return Rectangle(x_intersect, y_intersect, w_intersect, h_intersect)
    
    def get_x(self):
        return self.x
    
    def get_y(self):
        return self.y
    
    def get_w(self):
        return self.w
    
    def get_h(self):
        return self.h

# Проверка
rect1 = Rectangle(0, 0, 10, 10) 
rect2 = Rectangle(5, 0, 10, 15) 
rect3 = rect1.intersection(rect2) 
if rect3 is None: 
    print('Нет пересечений') 
else: 
    print(rect3.get_x(), rect3.get_y(), rect3.get_w(), rect3.get_h())



#2 
class LeftParagraph:
    def __init__(self, width):
        self.width = width
        self.words = []
    def add_word(self, word):
        if len(' '.join(self.words)) + len(word) <= self.width:
            self.words.append(word)
        else:
            self.end()
            self.words.append(word)
    def end(self):
        print(' '.join(self.words))
        self.words = []

class RightParagraph:
    def __init__ (self, width):
        self.width = width
        self.words = []
    def add_word(self, word):
        if len(' '.join(self.words + [word])) <= self.width:
            self.words.append(word)
        else:
            self.end()
            self.words.append(word)
    def end(self):
        space = ' ' * (self.width - len(' '.join(self.words)))
        print(space + ' '.join(self.words))
        self.words = []


lp = LeftParagraph(8)
lp.add_word('abc')
lp.add_word('defg')
lp.add_word('hi')
lp.add_word('jklmnopq')
lp.add_word('r')
lp.add_word('stuv')
lp.end()
print()

rp = RightParagraph(8)
rp.add_word('abc')
rp.add_word('defg')
rp.add_word('hi')
rp.add_word('jklmnopq')
rp.add_word('r')
rp.add_word('stuv')
rp.end()
print()



#3
class SeaMap:
     def __init__(self):
         self.map = [[None] * 10 for _ in range(10)]

     def shoot(self, row, col, result):
         self.map[row][col] = result
         if result == 'sink':
             for i in range(max(0, row - 1), min(len(self.map), row + 2)):
                 for j in range(max(0, col - 1), min(len(self.map[row]), col + 2)):
                     if self.map[i][j] == self.map[row][col]:
                         self.map[i][j] = 'hit'
                     else: self.map[i][j] = 'miss''

     def cell(self, row, col):
         if self.map[row][col] == None:
             return '.'
         elif self.map[row][col] == 'hit':
             return 'x'
         elif self.map[row][col] == 'miss':
             return '*'


sm = SeaMap()
sm.shoot(2, 0, 'sink')
sm.shoot(6, 9, 'hit')
for row in range(10):
    for col in range(10):
        print(sm.cell(row, col), end='')


#4
class Weapon():
    def __init__(self, name, damage, range):
        self.name = name
        self.damage = damage
        self.range = range

    def hit(self, actor, target):
        if not target.is_alive():
            print("Цель уже метва")
        else:
            if self.range < actor.get_distance(target):
                print(f'Враг слишком далеко для {self.name}')
            else:
                print(f'Врагу нанесен урон оружием {self.name} в размере {self.damage}')
                target.get_damage(self.damage)
                
    def __str__(self):
        return self.name

class BaseCharacter():
    def __init__(self, pos_x, pos_y, health_point):
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.hp = health_point

    def move(self, delta_x, delta_y):
        self.pos_x += delta_x
        self.pos_y += delta_y

    def is_alive(self):
        return self.hp > 0

    def get_damage(self, amount):
        self.hp -= amount
        if self.hp < 0:
            self.hp = 0

    def get_coords(self):
        return (self.pos_x, self.pos_y)
    
    def get_distance(self, other):
        dist_x = self.pos_x - other.pos_x
        dist_y = self.pos_y - other.pos_y
        return (dist_x ** 2 + dist_y ** 2) ** 0.5

class BaseEnemy(BaseCharacter):
    def __init__(self, pos_x, pos_y, weapon, hp):
        super().__init__(pos_x, pos_y, hp)
        self.weapon = weapon

    def hit(self, target):
        if not isinstance(target, BaseMainHero):
            print("Могу ударить только Главного героя")
        else:
            self.weapon.hit(self, target)

class BaseMainHero(BaseCharacter):
    Backpack = []
    def __init__(self, pos_x, pos_y, Hero_name, hp):
        super().__init__(pos_x, pos_y, hp)
        self.name = Hero_name
        self.Backpack = []
        self.equipped_weapon = None

    def hit(self, target):
        if not isinstance(self.equipped_weapon, Weapon):
            print("Я безоружен")
        else:
            if not isinstance(target, BaseEnemy):
                print("Могу ударить только Врага")
            else:
                self.equipped_weapon.hit(self, target)
      
    def add_weapon(self, weapon):
        if not isinstance(weapon, Weapon):
            print("Это не оружие")
        else:
            print(f"Подобрал {weapon}")
            self.Backpack.append(weapon)
            if not self.equipped_weapon:
                self.equipped_weapon = weapon
                
    def next_weapon(self):
        if not self.Backpack:
            print("Я безоружен")
        elif len(self.Backpack) == 1:
            print("У меня только одно оружие")
        else:
            index = self.Backpack.index(self.equipped_weapon)
            index = (index + 1) % len(self.Backpack)
            self.equipped_weapon = self.Backpack[index]
            print(f"Сменил оружие на {self.equipped_weapon}")
                
    def heal(self, amount):
        self.hp += amount
        if self.hp > 200:
            self.hp = 200
            print(f"Полечился, теперь здоровья {self.hp}")
    
weapon1 = Weapon("Короткий меч", 5, 1)
weapon2 = Weapon("Длинный меч", 7, 2)
weapon3 = Weapon("Лук", 3, 10)
weapon4 = Weapon("Лазерная орбитальная пушка", 1000, 1000)
princess = BaseCharacter(100, 100, 100)
archer = BaseEnemy(50, 50, weapon3, 100)
armored_swordsman = BaseEnemy(10, 10, weapon2, 500)
archer.hit(armored_swordsman)
armored_swordsman.move(10, 10)
print(armored_swordsman.get_coords())
main_hero = BaseMainHero(0, 0, "Король Артур", 200)
main_hero.hit(armored_swordsman)
main_hero.next_weapon()
main_hero.add_weapon(weapon1)
main_hero.hit(armored_swordsman)
main_hero.add_weapon(weapon4)
main_hero.hit(armored_swordsman)
main_hero.next_weapon()
main_hero.hit(princess)
main_hero.hit(armored_swordsman)
main_hero.hit(armored_swordsman)


#5
class MailServer:
    def __init__(self, name):
        self.name = name
        self.inbox = []
    
    def receive_mail(self, message):
        self.inbox.append(message)
    
    def get_inbox(self):
        return self.inbox

class MailClient:
    def __init__(self, server, user):
        self.server = server
        self.user = user
    
    def receive_mail(self):
        if self.server.name == self.user:
            inbox = self.server.get_inbox()
            print(f"Получено письмо на сервере {self.server.name}: {inbox}")
            self.server.inbox = []  # Удаляем все письма после получения
        else:
            print(f"Вы не имеете доступа к получению писем на сервере {self.server.name}")
    
    def send_mail(self, server, user, message):
        print(f"Отправка письма с {self.server.name} -> {server.name}: {message}")
        server.receive_mail((self.user, message))

# Создаем несколько почтовых серверов
server1 = MailServer("Сервер1")
server2 = MailServer("Сервер2")

# Создаем клиенты, подключенные к разным серверам
client1 = MailClient(server1, "Пользователь1")
client2 = MailClient(server2, "Пользователь2")

# Отправляем письма с одного сервера на другой
client1.send_mail(server2, "Пользователь2", "Привет от Пользователя1")
client2.send_mail(server1, "Пользователь1", "Привет от Пользователя2")

# Получаем письма
client1.receive_mail()
client2.receive_mail()
